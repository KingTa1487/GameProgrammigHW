<!DOCTYPE html>

<html>

<head>
<style>
	body {
	  background-color: #fff;
	  color: #111;
	  margin: 0px;
	  overflow: hidden;
	font-family: Monospace;
	  font-size: 20px;
	}
	
	#info {
	  position: absolute;
	  top: 0px;
	  width: 100%;
	  padding: 5px;
	  text-align: center;
	  color: #ffff00
	}
</style>
</head>

<body> 
<div id="info">
  Hw5a Helper <br>
  <button id='reset'>
  Reset
  </button>
</div>

<script src="https://threejs.org/build/three.min.js"></script>
<script src="https://jyunming-chen.github.io/game3js/js/ccdsys.js"></script>
<script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>

<script>
var scene, renderer, camera;

var raycaster;
var mouse = new THREE.Vector2();
var pickables = [];

/////////////////////////
var twoLinkArm;
var end;
var endPos, lastPos;

$('#reset').click (function(){
	puck.pos.set (0,0,35);
	puck.vel.set (0,0,0);
});

// use JavaScript Object
// no need to make it a CLASS (one of a kind)

var puck = {
	pos: new THREE.Vector3(),
    vel: new THREE.Vector3(),
    
    init: function () {
  		this.mesh = new THREE.Mesh(new THREE.CylinderGeometry(14, 14, 5, 20), 
  		          new THREE.MeshNormalMaterial());
	    this.pos.set (0,0,30);
	    this.mesh.position.copy (this.pos); 		 
    },
    
    update: function(dt) {
  	    this.pos.add (this.vel.clone().multiplyScalar(dt));
  	    this.vel.multiplyScalar (0.96);  // damp to ZERO

  	    this.mesh.position.copy (this.pos);
    }
}

var twoLinker = {  
    theta1: 0,
    theta2: 0,
    target: new THREE.Vector3(),

	init: function() {
		let twoLinkArm = new THREE.Object3D();

		this.link1 = makeLink (60)
		this.link2 = makeLink (90)

		twoLinkArm.add (this.link1);
		this.link1.add (this.link2);
		this.link2.position.set (60,0,0);

			// base
		let cyl_geom = new THREE.CylinderGeometry(10, 10, 6, 32);
		let cyl_mat = new THREE.MeshBasicMaterial({
			color: 0xff2211
		});
		let base = new THREE.Mesh(cyl_geom, cyl_mat);
		twoLinkArm.add(base);
	  
		return twoLinkArm;    
	},
	
	// ccdSys: to be added later

	update: function (thetas) { // pass jointAngleArray
    	this.theta1 = thetas[0]
        this.theta2 = thetas[1]
		this.link1.rotation.y = this.theta1;
  		this.link2.rotation.y = this.theta2;    
    }

}


init();
animate();

////////////////////////////////////////////////////////
// forward kinematics
function fk (theta, joints) {  // all memory assumed in place
	joints[0].set (0,0,0);
  
	var localzero = new THREE.Vector3(0, 0, 0);
	var m = new THREE.Matrix4();
	m.makeRotationY(theta[0]);
	m.multiply(new THREE.Matrix4().makeTranslation(60, 0, 0));
	localzero.applyMatrix4(m);
	joints[1].copy(localzero);

	localzero.set(0, 0, 0);
	m.multiply(new THREE.Matrix4().makeRotationY(theta[1]));
	m.multiply(new THREE.Matrix4().makeTranslation(90, 0, 0));
	localzero.applyMatrix4(m);
	joints[2].copy(localzero);
  
}

////////////////////////////////////////////////////////////////
function init() {

	renderer = new THREE.WebGLRenderer({
		antialias: true
	});
	renderer.setSize(window.innerWidth, window.innerHeight);
	renderer.setClearColor(0x888888);

	scene = new THREE.Scene();
	camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
	camera.position.set (0,160,420);
	camera.lookAt(new THREE.Vector3(0, 0, 0));
	document.body.appendChild(renderer.domElement);

	var gridXZ = new THREE.GridHelper(300, 30, 'red', 'white');
	scene.add(gridXZ);
	window.addEventListener('resize', onWindowResize, false);

	/////////////////////////////////////////////////////////////////////
	let plane = new THREE.Mesh(new THREE.PlaneGeometry(300, 300), new THREE.MeshBasicMaterial({
		transparent: true,
		opacity: 0.5,
		visible: true
	}));
	scene.add(plane);
	plane.rotation.x = -Math.PI / 2;
	pickables = [plane];

	raycaster = new THREE.Raycaster();
	document.addEventListener('mousemove', onDocumentMouseMove, false);

	/////////////////////////////////////////////
	puck.init();
	twoLinkArm = twoLinker.init();
	scene.add (puck.mesh, twoLinkArm);  
  
	end = new THREE.Mesh (new THREE.CylinderGeometry (14,14,5,32), new THREE.MeshBasicMaterial({color:'purple'}));
	scene.add (end);
	endPos = new THREE.Vector3();
	lastPos = new THREE.Vector3();
  
	twoLinkArm.position.set (0,0,50);
  
	// setting ccdSys
	twoLinker.ccdSys = new CCDSys (fk)
  
	// axes are in local frame of twolink arm
	twoLinker.ccdSys.setCCDAxis (new THREE.Vector3(0,1,0), 0)
	twoLinker.ccdSys.setCCDAxis (new THREE.Vector3(0,1,0), 1, -3.1, -0.01)  
}

function makeLink(length) {
  var oneLink = new THREE.Object3D();
  var mesh = new THREE.Mesh(new THREE.BoxGeometry(length, 10,10), new THREE.MeshNormalMaterial());
  oneLink.add(mesh);
  mesh.position.set(length/2, 0, 0);
  return oneLink;
}

function onWindowResize() {
  let width = window.innerWidth;
  let height = window.innerHeight;
  camera.aspect = width / height;
  camera.updateProjectionMatrix();
  renderer.setSize(width, height);
}

function animate() {
  
  requestAnimationFrame(animate);
  update()
  render();
  
  let dt = 0.1;
  // collision detection
  if (endPos.distanceTo (puck.pos) < 14+14) {
  	 console.log ('hit');
  	 puck.vel.copy (endPos.clone().sub(lastPos).divideScalar(dt));
  }
  
  
  lastPos.copy (endPos);	
  puck.update (0.1);
}

function render() {

  renderer.render(scene, camera);

  endPos.copy (twoLinkArm.children[0].children[1].localToWorld(new THREE.Vector3(90,0,0)));
  
  end.position.copy (endPos);
}


function update() {
	
  twoLinkArm.position.set (0, 0, 150);
  
  var thetas = [twoLinker.theta1, twoLinker.theta2];
  
  // target is set by mousedown callback
  twoLinker.ccdSys.solve (twoLinker.target, thetas);
  twoLinker.update (thetas);

}


function onDocumentMouseMove (event) {

  event.preventDefault();
  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

  // find intersections
  raycaster.setFromCamera(mouse, camera);
  var intersects = raycaster.intersectObjects(pickables);

  if (intersects.length > 0) {    
    twoLinker.target.copy ( twoLinkArm.worldToLocal (intersects[0].point) )  
  }

}


</script>
</body>

</html>